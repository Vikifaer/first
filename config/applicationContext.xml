<?xml version="1.0" encoding="utf-8"?>
<!-- xmlns:xml name space 是每一个schema唯一标识 -->
<beans xmlns="http://www.springframework.org/schema/beans" 
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:jaxws="http://cxf.apache.org/jaxws"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
	   					   http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	   					   http://cxf.apache.org/jaxws
	   					   http://cxf.apache.org/schemas/jaxws.xsd
	   					   http://www.springframework.org/schema/tx
	   					   http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	   					   http://www.springframework.org/schema/context
	   					   http://www.springframework.org/schema/context/spring-context-3.2.xsd">
	
 
	<context:property-placeholder location="classpath:jdbc.properties"/>
	<!-- Druid 连接池 -->
	<bean id="druid" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close"> 

      <property name="url" value="${jdbc.url}"></property>
      <property name="driverClassName" value="${jdbc.driver}"></property>
	  <property name="username" value="${jdbc.name}"></property>
	  <property name="password" value="${jdbc.pass}"></property>

      <!-- 配置初始化大小、最小、最大 -->
      <property name="initialSize" value="1" />
      <property name="minIdle" value="1" /> 
      <property name="maxActive" value="3" />
      <!-- 配置获取连接等待超时的时间 -->
      <property name="maxWait" value="3000" />
      <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
      <property name="timeBetweenEvictionRunsMillis" value="60000" />
      <!-- 检测语句 -->
      <property name="validationQuery" value="select 1 from dual" />
      <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
      <property name="minEvictableIdleTimeMillis" value="300000" />
      <!-- 检测时刻 -->
      <!-- 检测空闲状态的连接 -->
      <property name="testWhileIdle" value="true" />
      <!-- 检测将要被借出的连接 -->
      <property name="testOnBorrow" value="false" />
      <!-- 检测被还回的连接 -->
      <property name="testOnReturn" value="false" />
  	</bean>
	<!-- 声明SqlSessionFactoryBean -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 数据连接相关 -->
		<property name="dataSource" ref="druid"></property>
		<!-- DAO的mapper文件的位置 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:com/baizhi/lg/mapper/*.xml</value>
			</list>
		</property>
		<property name="typeAliasesPackage" value="com.baizhi.lg.entity"></property>
	</bean>
	<!-- DAO 
		 MapperScannerConfigurer
		 1.扫描basepackage，为其中的所有DAO接口定制实现类
		 2.将实现类纳入工厂
		 3.且每个dao对应的实现类的beanID就是其接口类名的首字母小写：userDAO
	 -->
	 <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	 	<property name="basePackage" value="com.baizhi.lg.dao"></property>
	 	<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
	 </bean>
	
	 <!-- 事务管理 
	 	  此中依赖的数据源要和SqlSessionFactoryBean保持一致
	 	 这并不是真正的事务管理器
	 -->
	 <bean id="tx61" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	 	<property name="dataSource" ref="druid"></property>
	 </bean>
	 
	 <context:component-scan base-package="com.baizhi.lg">
	 	<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	 </context:component-scan>
	 <tx:annotation-driven transaction-manager="tx61"/>
	 
</beans>

